<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://liantoki.github.io</id>
    <title>hzh&apos;s blog</title>
    <updated>2025-03-18T15:04:44.523Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://liantoki.github.io"/>
    <link rel="self" href="https://liantoki.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://liantoki.github.io/images/avatar.png</logo>
    <icon>https://liantoki.github.io/favicon.ico</icon>
    <rights>All rights reserved 2025, hzh&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[算法]]></title>
        <id>https://liantoki.github.io/post/suan-fa/</id>
        <link href="https://liantoki.github.io/post/suan-fa/">
        </link>
        <updated>2025-03-10T14:54:53.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>
<p>滤波算法<br>
1.1. 均值滤波<br>
原理概述：平均值滤波算法是比较常用，也比较简单的滤波算法。在滤波时，将N个周期的采样值累加计算平均值，算法非常简单。当N取值较大时，滤波后的信号比较平滑，但是灵敏度差；相反N取值较小时，滤波平滑效果差，但灵敏度好。是否平滑取决于采样个数的多少，灵敏度则取决于周期数的多少，而采样数与周期数N是成正比的关系。<br>
优点：算法简单，对周期性干扰有良好的抑制作用，平滑度高，适用于高频振动的系统。</p>
<p>缺点：对异常信号的抑制作用差，无法消除脉冲干扰的影响。</p>
<p>因此，在确定无异常信号的情况下，均值滤波绝对是一个好选择。</p>
<pre><code class="language-c">float data[100];
float averageFilter(float in_data,uint8_t size)
{
    float sum = 0;
    for(int i=0; i&lt;size-1; i++)
    {
	    data[i]=data[i+1];
	    sum = sum + data[i];
    }
    data[size-1] = in_data;
    sum = sum + data[9];

    return(sum/size);
}
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[笔记-C语言库函数]]></title>
        <id>https://liantoki.github.io/post/bi-ji-c-yu-yan-han-shu/</id>
        <link href="https://liantoki.github.io/post/bi-ji-c-yu-yan-han-shu/">
        </link>
        <updated>2025-03-05T02:35:50.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>&lt;string.h&gt; 是 C 标准库中的一个头文件，提供了一组用于处理字符串和内存块的函数。这些函数涵盖了字符串复制、连接、比较、搜索和内存操作等。<br>
1.1int strcmp(const char* str1, const char* str2)、int strcasecmp(const char *s1, const char *s2)和int strncasecmp(const char *s1, const char *s2, size_t n)<br>
相同点：作用均是比较两个字符串是否相等<br>
（1）若参数s1和s2字符串相同则返回0<br>
（2）若参数s1大于s2，则返回大于0的值<br>
（3）若参数s1小于s2，则返回小于0的值<br>
不同点：strcmp函数会区分字符大小写，其他两个不会<br>
strncasecmp函数，传入的第三个参数作用是将字符串的个数限制在前n个<br>
1.2char *strchr(const char *s, int c)和char *strrchr(const char *s, int c);<br>
相同点：<br>
第一个参数为字符串，第二个参数为字符<br>
作用均是在字符串中查找字符<br>
返回一个指向找到的字符的地址，否则返回null<br>
不同点：<br>
strchr函数是从左到右查找，也就是返回第一次出现该字符的地址，而strrchr函数是返回最后一次出现字符的地址。<br>
1.3char *strcpy(char *dest, const char *src)和char *strncpy(char *dest, const char *src, size_t n)<br>
相同点：<br>
作用均是拷贝src字符串到dest（指向用于存储复制内容的目标数组）里<br>
均返回指向目标字符串的指针<br>
不同点：<br>
strncpy函数将要拷贝的字符个数限制在了前n个，如果源字符串的长度小于 n，则 strncpy() 会在目标字符串的末尾添加一个 null 终止符。<br>
如果源字符串的长度大于或等于 n，则目标字符串不会被 null 终止，除非源字符串的前 n-1 个字符中恰好包含了一个 null 字符。<br>
由于 strncpy() 可能不会为目标字符串添加 null 终止符，因此在使用 strncpy() 后，通常需要手动检查并添加 null 终止符（如果尚未添加的话）。<br>
而strcpy函数会全部进行拷贝，但不会检查目标数组 dest 的大小是否足以容纳源字符串 src。如果目标数组太小，将会导致缓冲区溢出</li>
<li>&lt;limits.h&gt; 是 C 标准库中的一个头文件，定义了各种数据类型的限制。这些宏提供了有关整数类型（char、short、int、long 和 long long 等）的最大值和最小值的信息。</li>
<li>&lt;float.h&gt; 是 C 标准库中的一个头文件，定义了与浮点数类型（float、double 和 long double）相关的宏。这些宏提供了浮点数的特性和限制，例如最大值、最小值、精度等。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[通信协议详解]]></title>
        <id>https://liantoki.github.io/post/tong-xin-xie-yi-xiang-jie/</id>
        <link href="https://liantoki.github.io/post/tong-xin-xie-yi-xiang-jie/">
        </link>
        <updated>2025-02-25T02:59:06.000Z</updated>
        <content type="html"><![CDATA[<div class="toc">
<h2>📡 通信协议目录</h2>
<ul>
  <li><a href="#iic">1. I²C通信协议</a>
    <ul>
      <li><a href="#iic-physical">1.2 物理层</a></li>
      <li><a href="#iic-protocol">1.3 协议层</a></li>
    </ul>
  </li>
  <li><a href="#spi">2. SPI通信协议</a>
    <ul>
      <li><a href="#spi-mode">2.4 工作模式</a></li>
      <li><a href="#spi-example">2.4.1 模式判断示例</a></li>
    </ul>
  </li>
</ul>
</div>
<style>
.toc {
  background: #f8f9fa;
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.toc a { color: #2c3e50; }
.toc a:hover { color: #e74c3c; }
</style>
<p><a id="iic"></a></p>
<h2 id="1-i2c通信协议">1. I²C通信协议</h2>
<p><a id="iic-physical"></a></p>
<h3 id="12-物理层">1.2 物理层</h3>
<h4 id="123-ocod输出原因">1.2.3 OC/OD输出原因</h4>
<pre><code class="language-c">// 开漏输出实现线与逻辑
#define SDA_PIN_MODE()   GPIO_Mode_OD  // 配置为开漏模式
#define SCL_PIN_MODE()   GPIO_Mode_OD
</code></pre>
<p><a id="iic-protocol"></a></p>
<h3 id="13-协议层">1.3 协议层</h3>
<h4 id="135-通信流程">1.3.5 通信流程</h4>
<ul>
<li><strong>写寄存器时序</strong>：<br>
<img src="https://example.com/images/iic-write-register.png" alt="" loading="lazy"><br>
（图片来源：EM7028数据手册）</li>
</ul>
<hr>
<p><a id="spi"></a></p>
<h2 id="2-spi通信协议">2. SPI通信协议</h2>
<p><a id="spi-mode"></a></p>
<h3 id="24-工作模式">2.4 工作模式</h3>
<table>
<thead>
<tr>
<th>模式</th>
<th>CPOL</th>
<th>CPHA</th>
<th>空闲时钟</th>
<th>采样时刻</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>低电平</td>
<td>第一个时钟边沿</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td>低电平</td>
<td>第二个时钟边沿</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>0</td>
<td>高电平</td>
<td>第一个时钟边沿</td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>1</td>
<td>高电平</td>
<td>第二个时钟边沿</td>
</tr>
</tbody>
</table>
<p><a id="spi-example"></a></p>
<h3 id="241-模式判断示例">2.4.1 模式判断示例</h3>
<p><strong>ST7789V显示屏SPI模式判断</strong>：<br>
<img src="https://example.com/images/st7789v-spi-timing.png" alt="" loading="lazy"><br>
（图片来源：ST7789V数据手册）</p>
<p><strong>分析步骤</strong>：</p>
<ol>
<li><strong>空闲状态观察</strong>：CS未拉低时SCLK保持<strong>低电平</strong> → <strong>CPOL=0</strong></li>
<li><strong>数据采样点</strong>：数据在<strong>第一个上升沿</strong>被采样 → <strong>CPHA=0</strong></li>
<li><strong>结论</strong>：该器件工作在 <strong>Mode 0</strong></li>
</ol>
<pre><code class="language-c">// STM32 SPI模式0配置
SPI_InitTypeDef spi;
spi.CLKPolarity = SPI_POLARITY_LOW;  // CPOL=0
spi.CLKPhase = SPI_PHASE_1EDGE;      // CPHA=0
HAL_SPI_Init(&amp;spi);
</code></pre>
<hr>
<blockquote>
<p><strong>注意</strong>：实际开发时务必以器件数据手册的时序图为准，图片URL需替换为实际可访问地址。</p>
</blockquote>
<pre><code></code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[嵌入式系统内存管理]]></title>
        <id>https://liantoki.github.io/post/nei-cun-guan-li/</id>
        <link href="https://liantoki.github.io/post/nei-cun-guan-li/">
        </link>
        <updated>2025-02-23T14:36:07.000Z</updated>
        <content type="html"><![CDATA[<p>以下是优化后的内容，结合Markdown与HTML实现可跳转目录：</p>
<div class="toc">
<h2>📚 目录</h2>
<ul>
  <li><a href="#memory-areas">1. 内存四区</a>
    <ul>
      <li><a href="#code-area">1.1 代码区</a></li>
      <li><a href="#global-area">1.2 全局区</a></li>
      <li><a href="#heap-area">1.3 堆区</a></li>
      <li><a href="#stack-area">1.4 栈区</a></li>
    </ul>
  </li>
  <li><a href="#memory-distribution">2. 程序运行前后内存分布</a>
    <ul>
      <li><a href="#pre-run">2.1 运行前的内存分布</a></li>
      <li><a href="#post-run">2.2 运行时的内存分布</a></li>
    </ul>
  </li>
</ul>
</div>
<style>
.toc {
  border: 1px solid #e0e0e0;
  padding: 20px;
  border-radius: 8px;
  background: #f8f9fa;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.toc h2 { color: #2c3e50; margin-top: 0; }
.toc a { color: #3498db; text-decoration: none; }
.toc a:hover { color: #e74c3c; text-decoration: underline; }
.toc ul { padding-left: 20px; list-style-type: '👉 '; }
</style>
<p><a id="memory-areas"></a></p>
<h2 id="1-内存四区">1. 内存四区</h2>
<p><a id="code-area"></a></p>
<h3 id="11-代码区">1.1 代码区</h3>
<p>📌 <strong>核心特性</strong>：</p>
<ul>
<li>存储CPU执行的<strong>机器指令</strong>（二进制代码）</li>
<li><strong>共享性</strong>：高频程序只需内存保留一份（如标准库函数）</li>
<li><strong>只读性</strong>：防止意外修改指令（如病毒防护）</li>
</ul>
<p>⚙️ <strong>操作系统管理</strong>：</p>
<pre><code class="language-c">// 示例：代码区指令不可修改
const char* code_segment = &quot;0x55 0x48 0x89 0xE5&quot;;  // 编译后进入代码区
// 尝试修改会触发段错误（Segmentation Fault）
</code></pre>
<hr>
<p><a id="global-area"></a></p>
<h3 id="12-全局区">1.2 全局区</h3>
<p>📦 <strong>存储内容</strong>：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>示例</th>
<th>生命周期</th>
</tr>
</thead>
<tbody>
<tr>
<td>全局变量</td>
<td><code>int global_var = 10;</code></td>
<td>程序结束释放</td>
</tr>
<tr>
<td>静态变量（static修饰）</td>
<td><code>static int static_var = 20;</code></td>
<td>程序结束释放</td>
</tr>
<tr>
<td>字符串常量</td>
<td><code>&quot;Hello, World!&quot;</code></td>
<td>程序结束释放</td>
</tr>
<tr>
<td>const全局常量</td>
<td><code>const int MAX_LEN = 100;</code></td>
<td>程序结束释放</td>
</tr>
</tbody>
</table>
<p>⚠️ <strong>注意</strong>：局部常量（如函数内const变量）存放在栈区</p>
<hr>
<p><a id="heap-area"></a></p>
<h3 id="13-堆区">1.3 堆区</h3>
<p>🛠️ <strong>操作方式</strong>：</p>
<ul>
<li><strong>C语言</strong>：<code>malloc</code>分配 / <code>free</code>释放<pre><code class="language-c">int* heap_arr = (int*)malloc(10 * sizeof(int));  // 分配堆内存
free(heap_arr);  // 必须手动释放，否则内存泄漏
</code></pre>
</li>
<li><strong>C++</strong>：<code>new</code>分配 / <code>delete</code>释放<pre><code class="language-cpp">int* heap_obj = new int(42);  // 动态创建对象
delete heap_obj;              // 避免悬空指针
</code></pre>
</li>
</ul>
<p>🔍 <strong>特点</strong>：</p>
<ul>
<li><strong>手动管理</strong>：程序员需显式控制内存生命周期</li>
<li><strong>碎片风险</strong>：频繁分配释放可能产生内存碎片</li>
</ul>
<hr>
<p><a id="stack-area"></a></p>
<h3 id="14-栈区">1.4 栈区</h3>
<p>⚡ <strong>运行机制</strong>：</p>
<pre><code class="language-c">void example_func() {
    int local_var = 30;       // 栈区变量
    int *alarm = (int *)malloc(sizeof(int)); //指向堆区
    static int static_local;  // ❌ 静态局部变量在全局区不在栈区！
    int* ptr = &amp;local_var;    // 指针本身在栈，但指向栈地址
     int* ptr1 = alarm;    // ❌指针本身在栈，但指向堆地址
}  // 函数结束时自动释放local_var和ptr，而ptr1指向的地址在堆区故不对此地址进行回收
</code></pre>
<p>🚫 <strong>禁止操作</strong>：</p>
<pre><code class="language-c">int* dangerous_return() {
    int local_val = 100;
    return &amp;local_val;  // ❌ 返回栈地址会导致未定义行为
}
</code></pre>
<hr>
<p><a id="memory-distribution"></a></p>
<h2 id="2-程序运行前后内存分布">2. 程序运行前后内存分布</h2>
<p><a id="pre-run"></a></p>
<h3 id="21-运行前的内存分布">2.1 运行前的内存分布</h3>
<p>🔧 <strong>可执行文件结构</strong>：</p>
<pre><code>┌───────────────┐
│   文件头      │ → 包含代码区/全局区长度信息
├───────────────┤
│   代码区      │ → 机器指令（.text段）
├───────────────┤
│   全局区      │ → 已初始化数据（.data段）
│               │   未初始化数据（.bss段）
└───────────────┘
</code></pre>
<p><a id="post-run"></a></p>
<h3 id="22-运行时的内存分布">2.2 运行时的内存分布</h3>
<p>🏗️ <strong>内存布局</strong>：</p>
<pre><code>高地址
┌───────────────┐
│     栈区      │ ← 向下增长（存储局部变量/参数）
├───────────────┤
│               │
│     堆区      │ ← 向上增长（动态分配内存）
├───────────────┤
│   .bss段      │ ← 未初始化的全局变量（运行时清零）
├───────────────┤
│   .data段     │ ← 已初始化的全局变量
├───────────────┤
│   代码区      │ ← 只读指令（加载到Flash）
└───────────────┘
低地址
</code></pre>
<p>💡 <strong>关键差异</strong>：</p>
<table>
<thead>
<tr>
<th>区域</th>
<th>管理方式</th>
<th>生命周期</th>
<th>典型内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>代码区</td>
<td>静态预定义</td>
<td>程序整个生命周期</td>
<td>机器指令</td>
</tr>
<tr>
<td>全局区</td>
<td>静态预定义</td>
<td>程序整个生命周期</td>
<td>全局变量/静态变量</td>
</tr>
<tr>
<td>堆区</td>
<td>动态分配</td>
<td>手动控制</td>
<td>malloc/new对象</td>
</tr>
<tr>
<td>栈区</td>
<td>编译器自动管理</td>
<td>函数作用域</td>
<td>局部变量/参数</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[内置函数]]></title>
        <id>https://liantoki.github.io/post/nei-zhi-han-shu/</id>
        <link href="https://liantoki.github.io/post/nei-zhi-han-shu/">
        </link>
        <updated>2025-02-22T02:49:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="__builtin_expect-详解"><code>__builtin_expect</code> 详解</h1>
<h2 id="基本定义">基本定义</h2>
<p><code>__builtin_expect</code> 是 <strong>GCC 编译器提供的一个内置函数</strong>，用于向编译器提供分支预测的提示。它的核心目的是优化程序的执行效率，通过指导编译器更合理地安排条件分支的代码顺序，减少 CPU 流水线的停顿。</p>
<hr>
<h3 id="语法与参数">语法与参数</h3>
<pre><code class="language-c">long __builtin_expect(long exp, long c);
</code></pre>
<ul>
<li><strong><code>exp</code></strong>：需要预测的表达式（通常是一个条件判断，如 <code>x &gt; 0</code>）。</li>
<li><strong><code>c</code></strong>：期望 <code>exp</code> 的值（通常是 <code>0</code> 或 <code>1</code>）。</li>
</ul>
<hr>
<h2 id="底层原理与构成">底层原理与构成</h2>
<h3 id="1-编译器优化机制">1. 编译器优化机制</h3>
<p>CPU 执行分支指令时，若分支预测失败会导致流水线清空，造成性能损失。<code>__builtin_expect</code> 的实质是 <strong>通过静态提示</strong>，告诉编译器某个条件更可能为真（或假），从而让编译器生成更优的指令顺序。</p>
<h3 id="2-汇编层面的实现">2. 汇编层面的实现</h3>
<p>假设有以下代码：</p>
<pre><code class="language-c">if (__builtin_expect(x &gt; 0, 1)) {
    // 大概率执行的代码
} else {
    // 小概率执行的代码
}
</code></pre>
<p>编译器会倾向于将 <code>x &gt; 0</code> 为真的分支（即 <code>if</code> 块）放在 <strong>顺序执行路径</strong> 上（无跳转），而将 <code>else</code> 块放在需要跳转的位置，减少分支预测失败的概率。</p>
<p>生成的汇编可能类似：</p>
<pre><code class="language-asm">; x &gt; 0 大概率成立
cmp   eax, 0
jg    .Llikely_block  ; 顺序执行
jmp   .Lunlikely_block
</code></pre>
<hr>
<h2 id="典型应用场景">典型应用场景</h2>
<h3 id="1-优化热点路径">1. 优化热点路径</h3>
<p>在高性能代码中，标记高频执行的分支：</p>
<pre><code class="language-c">#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)

if (likely(condition)) {
    // 高频执行代码
} else {
    // 低频执行代码
}
</code></pre>
<h3 id="2-linux-内核中的使用">2. Linux 内核中的使用</h3>
<p>Linux 内核广泛使用 <code>likely</code> 和 <code>unlikely</code> 宏优化关键路径：</p>
<pre><code class="language-c">// include/linux/compiler.h
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
</code></pre>
<hr>
<h2 id="注意事项">注意事项</h2>
<ol>
<li><strong>仅作为提示</strong><br>
编译器可能忽略此提示，尤其在优化级别较低时（如 <code>-O0</code>）。</li>
<li><strong>不可滥用</strong><br>
错误的分支预测提示可能导致性能下降。</li>
<li><strong>兼容性</strong>
<ul>
<li>GCC 和 Clang 支持此特性。</li>
<li>MSVC 不支持，需改用 <code>__assume</code> 或手动优化。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="示例对比">示例对比</h2>
<h3 id="未使用-__builtin_expect">未使用 <code>__builtin_expect</code></h3>
<pre><code class="language-c">if (x &gt; 0) {
    // 代码块 A
} else {
    // 代码块 B
}
</code></pre>
<p>编译器生成的汇编可能将两个分支平等对待。</p>
<hr>
<h3 id="使用-__builtin_expect">使用 <code>__builtin_expect</code></h3>
<pre><code class="language-c">if (__builtin_expect(x &gt; 0, 1)) {
    // 代码块 A（大概率）
} else {
    // 代码块 B（小概率）
}
</code></pre>
<p>编译器会优先将代码块 A 放在顺序执行路径上，减少跳转开销。</p>
<hr>
<h2 id="替代方案">替代方案</h2>
<ul>
<li><strong>Profile-Guided Optimization (PGO)</strong><br>
通过实际运行数据指导编译器优化，比静态提示更精准。</li>
<li><strong>手动优化</strong><br>
在关键循环中调整代码顺序（需熟悉目标架构的流水线特性）。</li>
</ul>
<hr>
<h2 id="总结">总结</h2>
<table>
<thead>
<tr>
<th>特性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>作用</strong></td>
<td>静态提示编译器分支预测方向，优化指令顺序</td>
</tr>
<tr>
<td><strong>适用场景</strong></td>
<td>高频执行的条件分支（如错误处理、核心逻辑）</td>
</tr>
<tr>
<td><strong>底层机制</strong></td>
<td>调整汇编指令顺序，减少分支预测失败的开销</td>
</tr>
<tr>
<td><strong>编译器支持</strong></td>
<td>GCC/Clang 支持，MSVC 不支持</td>
</tr>
<tr>
<td><strong>最佳实践</strong></td>
<td>结合 <code>likely/unlikely</code> 宏使用，避免滥用</td>
</tr>
</tbody>
</table>
<pre><code>
&lt;div style=&quot;text-align: center; margin-top: 20px;&quot;&gt;
  &lt;a href=&quot;#toc&quot;&gt;返回目录&lt;/a&gt;
&lt;/div&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C语言宏用法总结]]></title>
        <id>https://liantoki.github.io/post/c-yu-yan-hong-yong-fa-zong-jie/</id>
        <link href="https://liantoki.github.io/post/c-yu-yan-hong-yong-fa-zong-jie/">
        </link>
        <updated>2025-02-17T02:51:24.000Z</updated>
        <content type="html"><![CDATA[<div id="toc"></div>
<h1 id="c语言宏用法总结">C语言宏用法总结</h1>
<h2 id="目录">目录</h2>
<ol>
<li><a href="#macro-definition">宏定义</a><br>
1.1 <a href="#macro-constant">宏常量</a><br>
1.2 <a href="#macro-statement">宏语句</a><br>
1.3 <a href="#macro-function">宏函数</a><br>
1.4 <a href="#macro-with-params">带参数宏定义</a></li>
<li><a href="#operators">运算符</a><br>
2.1 <a href="#operator-sharp">#运算符</a><br>
2.2 <a href="#operator-double-sharp">##运算符</a></li>
<li><a href="#variadic-macros">可变宏</a><br>
3.1 <a href="#variadic-basic">基本定义</a><br>
3.2 <a href="#variadic-empty-args">空参数处理</a><br>
3.3 <a href="#variadic-notes">注意事项</a></li>
<li><a href="#advanced-macros">预定义宏与高级技巧</a><br>
4.1 <a href="#predefined-macros">预定义宏</a><br>
4.2 <a href="#conditional-compilation">条件编译</a><br>
4.3 <a href="#debugging-tips">调试技巧</a><br>
4.4 <a href="#alternatives">替代方案</a></li>
</ol>
<hr>
<p><a id="macro-definition"></a></p>
<h2 id="1-宏定义">1. 宏定义</h2>
<p><a id="macro-constant"></a></p>
<h3 id="11-宏常量">1.1 宏常量</h3>
<ul>
<li><strong>不带参数</strong><pre><code class="language-c">#define PI 3.14
</code></pre>
</li>
<li><strong>带参数</strong><pre><code class="language-c">#define SQUARE(x) ((x) * (x))
</code></pre>
</li>
</ul>
<p><a id="macro-statement"></a></p>
<h3 id="12-宏语句">1.2 宏语句</h3>
<ul>
<li><strong>不带参数</strong><pre><code class="language-c">#define LOG_HELLO printf(&quot;hello&quot;)
</code></pre>
</li>
<li><strong>带参数</strong><pre><code class="language-c">#define LOG_MSG(x) printf(&quot;%s\n&quot;, x)
</code></pre>
</li>
</ul>
<p><a id="macro-function"></a></p>
<h3 id="13-宏函数">1.3 宏函数</h3>
<ul>
<li><strong>格式规范</strong><br>
使用 <code>do { ... } while(0)</code> 避免语法问题：<pre><code class="language-c">#define SAFE_CALL(x) do { func(x); cleanup(); } while(0)
</code></pre>
</li>
</ul>
<p><a id="macro-with-params"></a></p>
<h3 id="14-带参数宏定义">1.4 带参数宏定义</h3>
<ul>
<li><strong>核心规则</strong>
<ul>
<li>参数替换为符号，无类型检查</li>
<li>宏名与括号间不能有空格</li>
</ul>
</li>
<li><strong>与函数的区别</strong></li>
</ul>
<table>
<thead>
<tr>
<th>特性</th>
<th>宏</th>
<th>函数</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>展开时间</strong></td>
<td>预处理阶段</td>
<td>运行时</td>
</tr>
<tr>
<td><strong>类型检查</strong></td>
<td>无</td>
<td>有</td>
</tr>
<tr>
<td><strong>内存分配</strong></td>
<td>无</td>
<td>需要栈空间</td>
</tr>
<tr>
<td><strong>代码体积</strong></td>
<td>展开后代码膨胀</td>
<td>固定体积</td>
</tr>
</tbody>
</table>
<hr>
<p><a id="operators"></a></p>
<h2 id="2-运算符">2. 运算符</h2>
<p><a id="operator-sharp"></a></p>
<h3 id="21-运算符">2.1 <code>#</code> 运算符</h3>
<ul>
<li><strong>作用</strong>：将参数转换为字符串<pre><code class="language-c">#define STR(x) #x
STR(hello) // 展开为 &quot;hello&quot;
</code></pre>
</li>
</ul>
<p><a id="operator-double-sharp"></a></p>
<h3 id="22-运算符">2.2 <code>##</code> 运算符</h3>
<ul>
<li><strong>作用</strong>：强制拼接标识符<pre><code class="language-c">#define CONCAT(a, b) a##b
CONCAT(var, 1) // 展开为 var1
</code></pre>
</li>
<li><strong>必要性</strong>
<ul>
<li>直接拼接 <code>xy</code> 会保留空格，<code>##</code> 确保合并为单一标识符</li>
</ul>
</li>
</ul>
<hr>
<p><a id="variadic-macros"></a></p>
<h2 id="3-可变宏">3. 可变宏</h2>
<p><a id="variadic-basic"></a></p>
<h3 id="31-基本定义">3.1 基本定义</h3>
<pre><code class="language-c">#define LOG(fmt, ...) printf(fmt, __VA_ARGS__)
LOG(&quot;Value: %d&quot;, 42); // 展开为 printf(&quot;Value: %d&quot;, 42)
</code></pre>
<p><a id="variadic-empty-args"></a></p>
<h3 id="32-空参数处理">3.2 空参数处理</h3>
<table>
<thead>
<tr>
<th>标准</th>
<th>解决方案</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>GNU</strong></td>
<td><code>##__VA_ARGS__</code></td>
<td><code>printf(fmt, ##__VA_ARGS__)</code></td>
</tr>
<tr>
<td><strong>C99</strong></td>
<td>手动添加空参数占位符</td>
<td><code>LOG(&quot;Hello&quot;, );</code></td>
</tr>
<tr>
<td><strong>C11</strong></td>
<td><code>__VA_OPT__(,)</code></td>
<td><code>printf(fmt __VA_OPT__(,) ...)</code></td>
</tr>
</tbody>
</table>
<p><a id="variadic-notes"></a></p>
<h3 id="33-注意事项">3.3 注意事项</h3>
<ol>
<li><strong>参数顺序</strong>：<code>...</code> 必须位于参数列表末尾</li>
<li><strong>编译器兼容性</strong>
<ul>
<li>GCC：支持 <code>##__VA_ARGS__</code></li>
<li>MSVC：需启用 <code>/Zc:preprocessor</code></li>
</ul>
</li>
<li><strong>类型安全</strong>：需手动匹配格式化字符串与参数类型</li>
</ol>
<hr>
<p><a id="advanced-macros"></a></p>
<h2 id="4-预定义宏与高级技巧">4. 预定义宏与高级技巧</h2>
<p><a id="predefined-macros"></a></p>
<h3 id="41-预定义宏">4.1 预定义宏</h3>
<ul>
<li><strong>编译器内置宏</strong>：<br>
用于获取编译环境或代码位置信息：<pre><code class="language-c">printf(&quot;File: %s, Line: %d\n&quot;, __FILE__, __LINE__);   // 输出当前文件和行号
printf(&quot;Compiled on: %s %s\n&quot;, __DATE__, __TIME__);   // 输出编译日期和时间
</code></pre>
</li>
</ul>
<p><a id="conditional-compilation"></a></p>
<h3 id="42-条件编译与宏结合">4.2 条件编译与宏结合</h3>
<ul>
<li><strong>根据宏定义选择代码路径</strong>：<pre><code class="language-c">#define DEBUG 1
#if DEBUG
  #define LOG(x) printf(&quot;[DEBUG] %s\n&quot;, x)
#else
  #define LOG(x) (void)0
#endif
</code></pre>
</li>
<li><strong>检查宏是否存在</strong>：<pre><code class="language-c">#ifdef PI
  // PI已定义时执行
#else
  #define PI 3.14
#endif
</code></pre>
</li>
</ul>
<p><a id="debugging-tips"></a></p>
<h3 id="43-宏调试技巧">4.3 宏调试技巧</h3>
<ul>
<li><strong>查看宏展开结果</strong>：<br>
使用编译器选项（如GCC的<code>-E</code>）输出预处理后的代码：<pre><code class="language-bash">gcc -E source.c -o source.i
</code></pre>
</li>
<li><strong>静态断言（C11）</strong>：<br>
结合宏实现编译时检查：<pre><code class="language-c">#define STATIC_ASSERT(cond) _Static_assert(cond, #cond)
STATIC_ASSERT(sizeof(int) == 4); // 若int不为4字节则编译失败
</code></pre>
</li>
</ul>
<p><a id="alternatives"></a></p>
<h3 id="44-宏的替代方案">4.4 宏的替代方案</h3>
<ul>
<li><strong>内联函数</strong>：<br>
避免宏的副作用，支持类型检查：<pre><code class="language-c">static inline int square(int x) { return x * x; }
</code></pre>
</li>
<li><strong>泛型选择（C11）</strong>：<br>
使用<code>_Generic</code>替代宏实现泛型逻辑：<pre><code class="language-c">#define TYPE_NAME(x) _Generic((x), \
  int: &quot;int&quot;, double: &quot;double&quot;, default: &quot;unknown&quot;)
</code></pre>
</li>
</ul>
<hr>
<h2 id="补充宏的常见陷阱与最佳实践">补充：宏的常见陷阱与最佳实践</h2>
<ol>
<li>
<p><strong>多次求值问题</strong>：<br>
避免在宏参数中使用自增/自减操作：</p>
<pre><code class="language-c">#define SQUARE(x) ((x) * (x))
int a = 5;
SQUARE(a++); // 展开为 (a++) * (a++) → 结果不可预测！
</code></pre>
</li>
<li>
<p><strong>参数未括号化</strong>：<br>
宏参数需用括号包裹以防止运算符优先级问题：</p>
<pre><code class="language-c">#define ADD(x, y) x + y       // 错误：ADD(1, 2)*3 → 1 + 2*3
#define SAFE_ADD(x, y) ((x) + (y)) // 正确
</code></pre>
</li>
<li>
<p><strong>命名冲突与作用域管理</strong>：</p>
<ul>
<li>使用<code>#undef</code>释放不再需要的宏：<pre><code class="language-c">#define TEMP_MACRO 42
// 使用后释放
#undef TEMP_MACRO
</code></pre>
</li>
<li>在局部作用域内定义宏（通过<code>#pragma push_macro/pop_macro</code>，部分编译器支持）。</li>
</ul>
</li>
</ol>
<hr>
<div style="text-align: center; margin-top: 20px;">
  <a href="#toc">返回目录</a>
</div>
```
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[模块接口设计规范]]></title>
        <id>https://liantoki.github.io/post/mo-kuai-jie-kou-she-ji-gui-fan/</id>
        <link href="https://liantoki.github.io/post/mo-kuai-jie-kou-she-ji-gui-fan/">
        </link>
        <updated>2025-01-29T14:57:41.000Z</updated>
        <content type="html"><![CDATA[<!--- 目录导航 -->
<div style="border: 1px solid #e1e4e8; padding: 15px; border-radius: 6px; margin-bottom: 20px;">
  <h2 style="margin-top: 0;">📑 目录</h2>
  <ul>
    <li><a href="#名词解释">名词解释</a></li>
    <li><a href="#模块接口设计">模块接口设计</a>
      <ul>
        <li><a href="#usb接口">USB接口</a></li>
        <li><a href="#hdmi接口">HDMI接口</a></li>
        <li><a href="#晶振接口">晶振接口</a></li>
      </ul>
    </li>
  </ul>
</div>
<!--- 名词解释 -->
<p><a id="名词解释"></a></p>
<h2 id="名词解释">📖 名词解释</h2>
<h3 id="1-3w规则">1. 3W规则</h3>
<div style="background: #f6f8fa; padding: 10px; border-radius: 6px; margin: 10px 0;">
<strong>定义：</strong>信号线的中心间距不少于3倍线宽时，可保证70%的电场不互相干扰。<br>
<strong>应用：</strong>
- 2W间距 → 50%电场隔离
- 10W间距 → 98%电场隔离
</div>
<h3 id="2-20h规则">2. 20H规则</h3>
<div style="background: #f6f8fa; padding: 10px; border-radius: 6px; margin: 10px 0;">
<strong>定义：</strong>电源层相对地层内缩20H（H为介质厚度），限制70%电场在接地区域内。<br>
<strong>设计建议：</strong>
- 内缩1mm或>20mil（优先40mil）
- 内缩100H → 98%电场隔离
</div>
<h3 id="3-esd器件静电放电保护器件">3. ESD器件（静电放电保护器件）</h3>
<div style="background: #f6f8fa; padding: 10px; border-radius: 6px; margin: 10px 0;">
<strong>作用：</strong>防止静电放电（ESD）损坏电路，泄放瞬时高压（数千伏）。<br>
<strong>典型器件：</strong>TVS二极管、压敏电阻（MOV）
</div>
<h3 id="4-emi滤波器电磁干扰滤波器">4. EMI滤波器（电磁干扰滤波器）</h3>
<div style="background: #f6f8fa; padding: 10px; border-radius: 6px; margin: 10px 0;">
<strong>作用：</strong>抑制高频噪声和电磁辐射，确保EMC合规性。<br>
<strong>典型应用：</strong>共模电感、π型滤波器
</div>
<h3 id="5-zdiff差分阻抗">5. Zdiff（差分阻抗）</h3>
<div style="background: #f6f8fa; padding: 10px; border-radius: 6px; margin: 10px 0;">
<strong>定义：</strong>USB差分信号线特性阻抗，需控制为<mark>90Ω</mark>。<br>
<strong>关键因素：</strong>线宽、间距、PCB介质材料
</div>
<h3 id="6-共模电感">6. 共模电感</h3>
<div style="background: #f6f8fa; padding: 10px; border-radius: 6px; margin: 10px 0;">
<strong>作用：</strong>抑制共模噪声，降低EMI辐射。<br>
<strong>原理：</strong>对共模噪声高阻抗，对差分信号低阻抗
</div>
<!--- 模块接口设计 -->
<p><a id="模块接口设计"></a></p>
<h2 id="️-模块接口设计">🛠️ 模块接口设计</h2>
<p><a id="usb接口"></a></p>
<h3 id="usb接口">🔌 USB接口</h3>
<div style="background: #f6f8fa; padding: 10px; border-radius: 6px; margin: 10px 0;">
<ol>
  <li>接口靠近板边放置，方便拔插</li>
  <li>ESD器件靠近接口，走线先经过ESD器件</li>
  <li>EMI滤波器/共模电感靠近插座，防止辐射</li>
  <li>阻抗控制：Zdiff=90Ω</li>
  <li>差分信号总长≤6000mil</li>
  <li>差分打孔包地，换层加屏蔽地过孔</li>
  <li>差分对内等长误差±5mil</li>
</ol>
</div>
<p><a id="hdmi接口"></a></p>
<h3 id="hdmi接口">📺 HDMI接口</h3>
<div style="background: #f6f8fa; padding: 10px; border-radius: 6px; margin: 10px 0;">
<ol>
  <li>优先板边放置（根据结构需求）</li>
  <li>差分阻抗100Ω，单线50Ω</li>
  <li>ESD器件紧贴端子</li>
  <li>差分对内误差＜5mil，组内误差＜10mil</li>
  <li>与其他信号间距≥15mil或3W</li>
  <li>换层时加回流地过孔</li>
</ol>
</div>
<p><a id="晶振接口"></a></p>
<h3 id="晶振接口">⏳ 晶振接口</h3>
<div style="background: #f6f8fa; padding: 10px; border-radius: 6px; margin: 10px 0;">
<ol>
  <li>走线最短化，避免过孔</li>
  <li>GND过孔包围（包地处理）</li>
  <li>同层不铺铜，其他层铺铜需净空</li>
</ol>
</div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[linux下安装arm交叉编译链]]></title>
        <id>https://liantoki.github.io/post/an-zhuang-zui-xin-ban-arm-jiao-cha-bian-yi-lian/</id>
        <link href="https://liantoki.github.io/post/an-zhuang-zui-xin-ban-arm-jiao-cha-bian-yi-lian/">
        </link>
        <updated>2025-01-12T10:45:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-版本选择">一、版本选择</h2>
<p>访问 <a href="https://releases.linaro.org/components/toolchain/binaries/">https://releases.linaro.org/components/toolchain/binaries/</a>，页面呈现如下内容：<br>
<img src="https://liantoki.github.io/post-images/1736684625936.png" alt="" loading="lazy"><br>
依据自身需求点击进入特定版本，该页面提供了适用于 arm 架构的各类编译链。<br>
<img src="https://liantoki.github.io/post-images/1736684949477.png" alt="" loading="lazy"></p>
<h2 id="二-编译链详情">二、编译链详情</h2>
<ol>
<li><strong>aarch64-elf</strong>
<ul>
<li>面向 64 位 ARM 架构（AArch64），主要应用于嵌入式系统开发。其生成的可执行文件和库不依赖完整的 Linux 操作系统环境，常用于裸机编程或简单嵌入式系统。</li>
</ul>
</li>
<li><strong>aarch64-linux - gnu</strong>
<ul>
<li>同样针对 64 位 ARM 架构，用于创建能在 Linux 操作系统环境下运行的可执行文件和库，支持完整的 Linux 系统调用与功能，适用于开发 64 位 ARM Linux 系统上的应用程序和系统组件。</li>
</ul>
</li>
<li><strong>aarch64_be-elf</strong>
<ul>
<li>类似 aarch64-elf，但采用大端序（big - endian）字节序，而 aarch64 - elf 通常为小端序（little - endian），在特定硬件或系统要求大端序的场景中使用。</li>
</ul>
</li>
<li><strong>aarch64_be-linux-gnu</strong>
<ul>
<li>针对 64 位 ARM 大端序架构的 Linux 系统编译链，生成的可执行文件和库用于大端序的 64 位 ARM Linux 系统。</li>
</ul>
</li>
<li><strong>arm-eabi</strong>
<ul>
<li>针对 32 位 ARM 架构（ARMv7 及之前版本），常用于嵌入式系统开发，生成不依赖操作系统环境的可执行文件和库，类似 aarch64-elf 但适用于 32 位架构。</li>
</ul>
</li>
<li><strong>arm-linux-gnueabi</strong>
<ul>
<li>适用于 32 位 ARM 架构的 Linux 系统编译链，生成的可执行文件和库可在 32 位 ARM Linux 系统上运行，支持标准 Linux 系统调用和功能。</li>
</ul>
</li>
<li><strong>arm-linux-gnueabihf</strong>
<ul>
<li>与 arm-linux-gnueabi 类似，针对硬件浮点运算（hard-float）优化，在具有硬件浮点单元的 32 位 ARM 设备上可提升浮点运算性能。</li>
</ul>
</li>
<li><strong>armeb-eabi</strong>
<ul>
<li>32 位 ARM 大端序架构的编译链，生成不依赖操作系统环境的可执行文件和库，与 arm-eabi 区别在于字节序为大端序。</li>
</ul>
</li>
<li><strong>armeb-linux-gnueabi</strong>
<ul>
<li>用于 32 位 ARM 大端序架构的 Linux 系统编译链，生成的可执行文件和库用于大端序的 32 位 ARM Linux 系统。</li>
</ul>
</li>
<li><strong>armeb-linux-gnueabihf</strong>
<ul>
<li>结合 32 位 ARM 大端序架构和硬件浮点运算优化的 Linux 系统编译链。</li>
</ul>
</li>
<li><strong>armv8l-linux-gnueabihf</strong>
<ul>
<li>针对 ARMv8 架构的 32 位兼容模式（AArch32）且支持硬件浮点运算，用于生成在此特定架构 Linux 系统上运行的可执行文件和库。</li>
</ul>
</li>
</ol>
<h2 id="三-平台选择与下载">三、平台选择与下载</h2>
<p><img src="https://liantoki.github.io/post-images/1736684683997.png" alt="" loading="lazy"><br>
选定编译链后进入下一页面，此页面依据编译平台进行选择。编译链文件以 <code>gcc</code> 开头（后缀为 <code>asc</code> 和 <code>txt</code> 的文件并非编译链），如 <code>i686-mingw</code> 表示在 <code>i686</code> 架构的 <code>mingw</code> 环境运行，其他编译链同理。</p>
<h2 id="四-安装与环境配置">四、安装与环境配置</h2>
<p><img src="https://liantoki.github.io/post-images/1736684694768.png" alt="" loading="lazy"><br>
在 Linux 环境下完成下载后进行解压操作，接着在 <code>/etc/profile</code> 文件中设置解压后的 <code>bin</code>、<code>lib</code> 目录地址为环境变量，从而完成安装与环境配置。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LVGL]]></title>
        <id>https://liantoki.github.io/post/lvgl-switch/</id>
        <link href="https://liantoki.github.io/post/lvgl-switch/">
        </link>
        <updated>2024-11-26T14:27:14.000Z</updated>
        <content type="html"><![CDATA[<p>SWITCH:</p>
<p><img src="https://liantoki.github.io/post-images/1732631947155.png" alt="" loading="lazy"><br>
<img src="https://liantoki.github.io/post-images/1732631951190.png" alt="" loading="lazy"><br>
<img src="https://liantoki.github.io/post-images/1732631954031.png" alt="" loading="lazy"><br>
<img src="https://liantoki.github.io/post-images/1732632016612.png" alt="" loading="lazy"></p>
<p>CHECKBOX:<br>
<img src="https://liantoki.github.io/post-images/1732675532060.png" alt="" loading="lazy"><br>
<img src="https://liantoki.github.io/post-images/1732676050479.png" alt="" loading="lazy"><br>
<img src="https://liantoki.github.io/post-images/1732687416480.png" alt="" loading="lazy"><br>
<img src="https://liantoki.github.io/post-images/1732687423569.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>